/*
 * This file was generated by the Gradle 'init' task.
 *
 */

plugins {
    // Plugins method cannot be called within subprojects. Has to run outside.
    id 'org.springframework.boot' version '2.4.0'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

allprojects {

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven { url 'https://repo.spring.io/milestone' }
        maven { url 'http://repo.spring.io/snapshot' }
    }
}

subprojects {
    version = '1.0'
    // Java version must be declared after the 'java' plugin
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 15

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'

        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'

        // Only the API is typically required. The implementation jars are only
        // required if you want to change logging levels dynamically at runtime.
        implementation('org.slf4j:slf4j-api:1.7.25')
        implementation('ch.qos.logback:logback-classic:1.2.3')
        implementation('ch.qos.logback:logback-core:1.2.3')

        // Problems serializing LocalDateTime in PortfolioTransaction class. We need to
        // add these libraries to handle serialization from the new LocalDateTime format.
        implementation('com.fasterxml.jackson.core:jackson-databind:2.10.2')
        implementation('com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.8')

        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

        // For reactive and parallel streams
        implementation('io.projectreactor:reactor-core')
        testImplementation('io.projectreactor:reactor-test')

        // Text file serialization/deserialization - convert objects to JSON
        // https://mvnrepository.com/artifact/com.google.code.gson/gson
        implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.5'

        // https://mvnrepository.com/artifact/org.apache.commons/commons-text
        implementation group: 'org.apache.commons', name: 'commons-text', version: '1.8'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        // Use JUnit Jupiter API for testing.
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'

        // Use JUnit Jupiter Engine for testing.
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'

        // https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
        testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.2.0'
    }

    compileJava {
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath
            ]
        }
    }

    compileTestJava {
        doFirst {
            options.compilerArgs = [
                    '--module-path', classpath.asPath
            ]
        }
    }

    test {
        //jvmArgs '--enable-preview'
        useJUnitPlatform()
        testLogging {
            // Display Junit logger messages to stdout when running outside of Intellij
            outputs.upToDateWhen { false }
            showStandardStreams = true
        }
        ignoreFailures = true
    }
}

